#! /usr/bin/scheme --script
(load "lib/lib.scm")

(define input 368078)

(define (get-spiral in i)
  (let ((n (+ 1 (* i 2))))
    (let ((sq (* n n)))
      (if (< in sq) 
        (set! spiral i)
        (get-spiral in (+ i 1))
  ))))
(get-spiral input 1)

(define (get-bounds in upper)
  (let ((lower (- upper (* 2 spiral))))
    (set! bmax upper)
    (if (< lower in)
      (set! bmin lower)
      (get-bounds in lower)
  )))
(get-bounds input (* (+ 1 (* 2 spiral)) (+ 1 (* 2 spiral))))

(define p1 
  (let ((mid (- bmax spiral)))
    (if (< input mid)
      (+ spiral (- mid input))
      (+ spiral (- input mid))
  )))

(write-part1 p1)

(define grid (make-hashtable equal-hash equal?))
(hashtable-set! grid (cons 0 0) 1)
(define (get x y) (hashtable-ref grid (cons x y) 0))
(define (neighbours x y)
  `( ,(get (- x 1) (- y 1))
     ,(get x (- y 1))
     ,(get (+ x 1) (- y 1))
     ,(get (- x 1) y)
     ,(get (+ x 1) y)
     ,(get (- x 1) (+ y 1))
     ,(get x (+ y 1))
     ,(get (+ x 1) (+ y 1))
  ))

(define (up x y len current)
  (let ((sum (apply + (neighbours x y)) ))
    (hashtable-set! grid (cons x y) sum)
    (if (> sum input)
      sum
      (if (= len current)
        (left (- x 1) y len 1)
        (up x (- y 1) len (+ current 1))
  ))))
(define (left x y len current)
  (let ((sum (apply + (neighbours x y)) ))
    (hashtable-set! grid (cons x y) sum)
    (if (> sum input)
      sum
      (if (= len current)
        (down x (+ y 1) len 1)
        (left (- x 1) y len (+ current 1))
  ))))
(define (down x y len current)
  (let ((sum (apply + (neighbours x y)) ))
    (hashtable-set! grid (cons x y) sum)
    (if (> sum input)
      sum
      (if (= len current)
        (right (+ x 1) y len 1)
        (down x (+ y 1) len (+ current 1))
  ))))
(define (right x y len current)
  (let ((sum (apply + (neighbours x y)) ))
    (hashtable-set! grid (cons x y) sum)
    (if (> sum input)
      sum
      (if (= len current)
        (up (+ x 1) y (+ len 2) 1)
        (right (+ x 1) y len (+ current 1))
  ))))
(define p2 (up 1 0 2 1))

(write-part2 p2)
