#! /usr/bin/scheme --script
(load "lib/lib.scm")

(define (input) (filehandle 13))

(define (take-until lst ch)
  (if (char=? (car lst) ch)
    (cons '() lst)
    (let ((next (take-until (cdr lst) ch)))
      (cons (cons (car lst) (car next)) (cdr next)))))

(define (list->number x)
  (string->number (list->string x)))

(define (handle-line line dlay)
  (let ((taken (take-until line #\:)))
    (let ((depth (list->number (car taken))) (range (list->number (cdddr taken))))
      (let ((n (- (* range 2) 2)))
        ;;(printf "(not (= (mod x ~d) ~d))\n" n (mod (- n (mod depth n)) n))
        (if (= (mod (+ depth dlay) n) 0)
          (+ (* depth range) dlay)
          0
  )))))

(define (firewall file severity dlay)
  (let ((line (get-line file)))
    (if (eq? #!eof line)
      severity
      (firewall file (+ severity (handle-line (string->list line) dlay)) dlay)
    )))

(write-part1 (firewall (input) 0 0))

;; autogenerated using line 19
(define (test x)
(if (and 
(not (= (mod x 4) 0))
(not (= (mod x 2) 1))
(not (= (mod x 6) 4))
(not (= (mod x 10) 6))
(not (= (mod x 6) 0))
(not (= (mod x 10) 2))
(not (= (mod x 8) 6))
(not (= (mod x 10) 8))
(not (= (mod x 14) 0))
(not (= (mod x 14) 12))
(not (= (mod x 14) 10))
(not (= (mod x 10) 0))
(not (= (mod x 22) 0))
(not (= (mod x 14) 4))
(not (= (mod x 14) 2))
(not (= (mod x 18) 8))
(not (= (mod x 16) 2))
(not (= (mod x 22) 12))
(not (= (mod x 14) 8))
(not (= (mod x 22) 8))
(not (= (mod x 22) 6))
(not (= (mod x 22) 4))
(not (= (mod x 26) 10))
(not (= (mod x 26) 8))
(not (= (mod x 22) 20))
(not (= (mod x 22) 18))
(not (= (mod x 22) 16))
(not (= (mod x 22) 14))
(not (= (mod x 26) 24))
(not (= (mod x 22) 10))
(not (= (mod x 26) 20))
(not (= (mod x 26) 18))
(not (= (mod x 26) 16))
(not (= (mod x 26) 14))
(not (= (mod x 18) 2))
(not (= (mod x 26) 6))
(not (= (mod x 26) 4))
(not (= (mod x 26) 2))
(not (= (mod x 26) 0))
(not (= (mod x 26) 22))
(not (= (mod x 32) 10))
(not (= (mod x 34) 14))
(not (= (mod x 50) 4))
) (begin (write-part2 x) #t) #f ))

(do ((x 0 (+ x 1)))
  ((test x))
  )
